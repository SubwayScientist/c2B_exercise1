##########
# README #
##########

This code calculates the conductivities in a basic tight-binding model (2D square lattice).

################
MAIN REPOSITORY:

To get the most recent version of the source code on this project,
in command line on a bash terminal (represented here with the "$" sign), type:
$ hg clone https://bitbucket.org/mnmpdadish/onebody


##########
COMPILING:

In order to compile, install gcc, gfortran, Gnuplot, Cuba, Lapack and BLAS 
on your computer and type in the source code root directory:
$ make

This approach should work on Linux and Mac. 
For mammouth, it is more appropriate to load the correct module instead of 
installing any new libraries. 

On Ms, type:

ms$ module add gcc/6.4.0 cuba/4.0 intel64/12.1.3.293

and on Mp:

mp$ module add gcc/6.1.0 cuba/4.0 intel64/13.1.3.192

The makefile is written to detect the mammouth version automatically. 
The "make" command will generate the binary file "oneBody" in the root directory.


#############
DEPENDENCIES:

gcc: Tested with version 4.8.1. Must be recent enough.

gfortran: Tested with version 4.6.4. Must be recent enough.

Gnuplot: Any version of gnuplot should be enough to run the program properly, 
         but the code was developped using version 5.0. One can turn off this 
         dependency by removing the "-DINTERACTIVE" option in the makefile. This
         will prevent to use the interactive version "$ ./oneBody i" of the code.
         
Cuba: An integration library available via http://www.feynarts.de/cuba/
      Version 4.0 or higher should be used to work and compile correctly.

Lapack: Tested with version 3.5.0. Must be recent enough.

####
RUN:

To check how to use the code, type:
$ ./oneBody

Read this help to learn about the different tasks available ('i', 'd', 'l', 'mdc').
Any other task than the help needs a "para.dat" file that specify the model 
parameters. An example of a "para.dat" file is contained in the "example" 
directory. The "para.dat" file can contain the following parameters:

ETA   Lorentzian broadening of the spectral weight
OMEGA frequency (OMEGA=0 is the Fermi level)
MU    chemical potential
t     nearest neighbor hopping energy
tp    second nearest neighbor hopping energy
tpp   third nearest neighbor hopping energy
M     antiferromagntic energy
D     superconductivity energy

nMu   number of Mu to calculate
muMin minimum Mu of the loop
muMax maximum Mu of the loop

VERBOSE level of verbose of the program
EPSREL  relative error demanded
EPSABS  absolute error demanded
MAXEVAL maximum number of evaluations
MINEVAL minimum number of evaluations

If any of these parameters are not found, default parameters will be used 
(and printed on the screen).


#########
EXAMPLES:

Examples of results files are found in the "example" directory. Informations 
on how to reproduce these results by running the code are found in "example/README".


#####
Reviewer: Maxime Charlebois
Date: 15th november 2017
Tested on Linux Ubuntu LTS 12.04 and 16.04, Lubuntu 16.10

www.physique.usherbrooke.ca/source_code 
code submission procedure v1.2 compliant

